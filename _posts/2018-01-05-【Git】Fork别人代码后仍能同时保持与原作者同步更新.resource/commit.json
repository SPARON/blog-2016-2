{"compress":true,"commitItems":[["caebcdea-d026-4a55-97d5-bf2215a772d7",1515375966607,"---\nlayout: post\ntitle: 【Git】Fork别人代码后仍能同时保持与原作者同步更新\ndate: 2018-01-05\ncategories: [环境]\ndescription: 通常我们在GitHub中Fork别人仓库代码，自己再作修改后需要对远程作者修改及自己修改部分做合并操作。\nkeywords: Git\n---\n\n\n# 1. 从自己fork之后的版本库clone\n\n\n```shell\n$ git clone -o chucklu https://github.com/chucklu/Hearthstone-Deck-Tracker.git\n\n```\n\n**参数说明:**\n\n-o <name>\n\nInstead of using the remote name origin to keep track of the upstream repository, use <name>.\n\n\n# 2. 再将别人的版本库 `git remote add`\n\n```shell\n$ git remote add epix37 https://github.com/Epix37/Hearthstone-Deck-Tracker.git\n```\n\n```shell\n$ git remote -v\n\nchucklu https://github.com/chucklu/Hearthstone-Deck-Tracker.git (fetch)\nchucklu https://github.com/chucklu/Hearthstone-Deck-Tracker.git (push)\nepix37 https://github.com/Epix37/Hearthstone-Deck-Tracker.git (fetch)\nepix37 https://github.com/Epix37/Hearthstone-Deck-Tracker.git (push)\n```\n\n\n# 3. 本地分支和远端分支映射处理\n\n> 参考: [如何将本地分支和远端分支进行映射](http://www.cnblogs.com/chucklu/p/4730745.html)   \n\n```shell\n$ git branch\n\nchucklu_master\n*master\n```\n- `chucklu_master` 分支用来对应自己远端的 `master` 分支\n- `master` 分支用来对应原作者的 `master` 分支\n\n\n## 3.1 切换到master分支\n\n```shell\n$ git checkout master\n```\n首先确保目前处于master分支，上面的git branch就是查看本地分支的命令，master前面的 * 表示当前分支是master分支\n\n## 3.2 同步原作者的代码\n\n```shell\n$ git pull\n```\n\n## 3.3 切换到chucklu_master分支\n\n```shell\n$ git checkout chucklu_master\n```\n## 3.4 变基或者合并\n\n```shell\n$ git rebase master\n$ git merge master\n```\n## 3.5 推送代码到自己的版本库\n```shell\n$ git push chucklu HEAD:master或者\n$ git push chucklu chucklu_master:master\n```\n- 假如自己 `fork` 版本库之后，已经在某个分支上进行了修改的话。那么 `rebase` 就不适用，需要使用 `cherry-pick` 来处理。\n- 为了确保 `cherry-pick` 之后的代码，确实是自己所期望的，那么只需要对比一次，自己的分支的最后一次提交和原作者的分支的最后一次提交，看看差异，是否是自己额外修改导致的，使用 `tortoisegit` --> `diff with previous version`\n\n![](https://images2015.cnblogs.com/blog/470550/201509/470550-20150904071437560-1549738915.png)\n\n- 使用 `cherry-pick` 的注意事项，如果其中有某一个 `commit` 是合并导致的，那么这个 `commit` 就不需要进行`cherry-pick`\n- 另外网上看到的一篇文章，貌似`cherry-pick`不推荐使用: [# Why cherry-picking should not be part of a normal git workflow](http://dan.bravender.net/2011/10/20/Why_cherry-picking_should_not_be_part_of_a_normal_git_workflow.html)\n- 如果你仅仅是同步原作者的master分支，而不需要进行合并操作的话，本地仅有一个分支也够用了，需要添加2个remote\n\n\n# 扩展：\n\n重新命名远端:\n\n```shell\n$ git remote rename oldname newname\n```\n\n# 参考\n\n- [Git远程操作详解](http://www.ruanyifeng.com/blog/2014/06/git_remote.html)\n- [Git 同时与多个远程库互相同步](http://www.cnblogs.com/hongdada/p/7573923.html)\n- [git将本地已经存在的分支和一个指定的远端分支建立映射关系](http://www.cnblogs.com/chucklu/p/4730745.html)\n- [五步git操作搞定Github中fork的项目与原作者同步](http://blog.csdn.net/zwhlxl/article/details/45110587)\n",[[1515375959856,["Administrator@USERUQI-6UR7SJ3",[[1,2539,"\n"]],[2538,2538],[2539,2539]]],[1515375961649,["Administrator@USERUQI-6UR7SJ3",[[-1,2539,"\n"]],[2539,2539],[2538,2538]]]]]]}